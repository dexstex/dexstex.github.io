var userid = "545719664983015434"; async function init(i) { let e = i, t = document.getElementById("avatar"); if ("online" === e.discord_status) t.classList.add("online"); else if ("idle" === e.discord_status) t.classList.add("idle"); else if ("dnd" === e.discord_status) t.classList.add("dnd"); else { t.classList.add("offline"); let i = document.getElementById("activities"); var a = document.createElement("div"); a.id = "offline", a.className = "activity", i.appendChild(a); let e = ["Doing nothing", "Probably in school", "Hi :3", "Dead X_X", "PC exploded", "Probably touching grass"]; var s = e[Math.random() * e.length | 0]; a.innerHTML = s } t.src = "https://cdn.discordapp.com/avatars/545719664983015434/" + e.discord_user.avatar, document.getElementById("name").innerHTML = e.discord_user.username; let l = e.activities, n = document.getElementById("activities"); l.forEach((i => { if (4 !== i.type) { var t = document.createElement("div"); if (t.id = i.name.split(" ").join("").toLowerCase(), t.className = "activity", "Spotify" === i.name) { var a = e.spotify.timestamps.start, s = e.spotify.timestamps.end; exp_time = Math.floor(Date.now() / 1e3), sdiff = 1e3 * exp_time - a, ediff = s - a, formatTime = i => { var e = Math.floor(i / 1e3 % 60); return [Math.floor(i / 1e3 / 60 % 60), e].map((i => String(i).padStart(2, 0))).join(":") }; var l = Math.round(sdiff / ediff * 100), o = [e.spotify.song, e.spotify.artist.split("; ").join(", ")], d = [formatTime(sdiff), formatTime(ediff)]; t.innerHTML = '<div id="sact-info"><img loading="lazy" class="act-icon" draggable="false" alt="" width="88" height="88" src="' + e.spotify.album_art_url + '"> <div id="sact-name"> <strong>' + i.name + '</strong><ul id="songinfo"><li class="songinfoli">' + o.join('</li><li class="songinfoli">By ') + '</li></ul></div></div><ul id="songtime"><li class="songtimeli">' + d.join('</li><li class="songtimeli">') + '</li></ul><div class="progressbar"><div class="progress" style="width:' + l + '%;"></div></div>' } else { const e = i.timestamps.start, a = Math.floor(Date.now() / 1e3); diff = 1e3 * a - e, formatTime = i => { const e = Math.floor(i / 1e3 % 60), t = Math.floor(i / 1e3 / 60 % 60); return [Math.floor(i / 1e3 / 3600 % 60), t, e].map((i => String(i).padStart(2, 0))).join(":") }; var r = ["<strong>" + i.name + "</strong>", "<p>" + (void 0 === i.details ? "<br>" : i.details) + "</p>", "<p>" + (void 0 === i.state ? formatTime(diff) + " elapsed" : i.state) + "</p>"]; void 0 !== i.assets ? i.assets.large_image.startsWith("mp:external/") && (t.innerHTML = '<img loading="lazy" draggable="false" alt="activity icon" class="act-icon" src="https://media.discordapp.net/external/' + i.assets.large_image.replace("mp:external/", "") + '"> <div class="other"><ul><li class="act">' + r.join('</li><li class="act">') + "</li></ul></div>") : void 0 === i.assets && (t.innerHTML = '<img loading="lazy" draggable="false" alt="" width="88" height="88" src="/unknown.webp"> <div class="other"><ul><li>' + r.join("</li><li>") + "</li></ul></div>") } n.appendChild(t) } else { var c = document.getElementById("status"), m = document.getElementById("statusemoji"); null == i.state || (c.innerHTML = i.state), null !== i.emoji.name ? m.innerHTML = i.emoji.name : null !== i.emoji.id && (m.innerHTML = ['<img draggable="false" alt="" width="24" height="24" src="https://cdn.discordapp.com/emojis/' + i.emoji.id + (i.emoji.animated ? ".gif" : ".png") + "</img>"]) } })) } async function updatepresence() { var i = await lanyard({ userId: userid }); let e = i.activities, t = document.getElementById("activities"); if (e.forEach((e => { if (4 !== e.type) { var a = e.name.split(" ").join("").toLowerCase(), s = !0; null !== document.getElementById(a) && (s = 0 == document.getElementById(a).length); let m = document.getElementById(a); if (s && (m = document.createElement("div"), m.id = a, m.className = "activity"), "Spotify" === e.name) { var l = i.spotify.timestamps.start, n = i.spotify.timestamps.end; exp_time = Math.floor(Date.now() / 1e3), sdiff = 1e3 * exp_time - l, ediff = n - l, formatTime = i => { var e = Math.floor(i / 1e3 % 60); return [Math.floor(i / 1e3 / 60 % 60), e].map((i => String(i).padStart(2, 0))).join(":") }; var o = Math.round(sdiff / ediff * 100), d = [i.spotify.song, i.spotify.artist.split("; ").join(", ")], r = [formatTime(sdiff), formatTime(ediff)]; m.innerHTML = '<div id="sact-info"><img loading="lazy" class="act-icon" draggable="false" alt="" width="88" height="88" src="' + i.spotify.album_art_url + '"> <div id="sact-name"> <strong>' + e.name + '</strong><ul id="songinfo"><li class="songinfoli">' + d.join('</li><li class="songinfoli"> By ') + '</li></ul></div></div><ul id="songtime"><li class="songtimeli">' + r.join('</li><li class="songtimeli">') + '</li></ul><div class="progressbar"><div class="progress" style="width:' + o + '%;"></div></div>' } else { const i = e.timestamps.start, t = Math.floor(Date.now() / 1e3); diff = 1e3 * t - i, formatTime = i => { const e = Math.floor(i / 1e3 % 60), t = Math.floor(i / 1e3 / 60 % 60); return [Math.floor(i / 1e3 / 3600 % 60), t, e].map((i => String(i).padStart(2, 0))).join(":") }; var c = ["<strong>" + e.name + "</strong>", "<p>" + (void 0 === e.details ? "<br>" : e.details) + "</p>", "<p>" + (void 0 === e.state ? formatTime(diff) + " elapsed" : e.state) + "</p>"]; void 0 !== e.assets ? e.assets.large_image.startsWith("mp:external/") && (m.innerHTML = '<img loading="lazy" draggable="false" alt="activity icon" class="act-icon" src="https://media.discordapp.net/external/' + e.assets.large_image.replace("mp:external/", "") + '"> <div class="other"><ul><li class="act">' + c.join('</li><li class="act">') + "</li></ul></div>") : void 0 === e.assets && (m.innerHTML = '<img loading="lazy" draggable="false" alt="" width="88" height="88" src="/unknown.webp"> <div class="other"><ul><li>' + c.join("</li><li>") + "</li></ul></div>") } s && t.appendChild(m) } })), "offline" == i.discord_status); else { let i = []; e.forEach((e => { 4 !== e.type && i.push(e.name.split(" ").join("").toLowerCase()) })); for (var a = [].slice.call(t.getElementsByClassName("activity"), 0), s = new Array(a.length), l = a.length, n = (i.length, 0); n < l; n++) { var o = a[n].getAttribute("id"); s[n] = o } var d = s.filter((e => !i.includes(e))); a.filter((i => d.includes(i.id))).forEach((i => { i.remove() })) } } const onload = async () => { (async () => { init(await lanyard({ userId: userid })) })(), lanyard({ userId: userid, socket: !0, onPresenceUpdate: updatepresence }) };